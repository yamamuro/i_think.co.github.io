#pragma once

/*===================================*/
//!< 前方宣言
/*===================================*/
class CTexture;

class XFILE
{

	/*================================================*/
	//!
	//! \class XFile
	//! \brief 1つのメッシュデータ
	//! 
	//! \author 配布データ+Y.Yamamuro \n
	//! \date  2014/09/09
	//! \since 2014/09/09
	//!
	/*================================================*/

public:

	LPD3DXMESH		lpMesh;			//!< メッシュ情報
	DWORD			NumMaterial;	//!< マテリアル数
	D3DMATERIAL9	*Mat;			//!< マテリアル情報
	CTexture		**Tex;			//!< テクスチャ情報

};


class CXFile 
{

	/*==================================================*/
	//!
	//! \file
	//! \class CXFile
	//! \brief <b>XFileの管理を行う</b>
	//! 
	//! \author 配布データ+Y.Yamamuro \n
	//! \date  2014/09/09
	//! \since 2014/09/10
	//!
	/*==================================================*/

public:

	/*===============================================*/
	//! \brief デフォルトコンストラクタ
	/*===============================================*/
	CXFile( void );

	/*=========================================================*/
	//! \brief 読み込みを同時に行うコンストラクタ
	//! \param[in]		lpD3DDevice		DirectXのデバイス
	//! \param[in]		_FilePass		ファイルパス
	/*=========================================================*/
	CXFile( LPDIRECT3DDEVICE9 lpD3DDevice , std::string *_FilePass );	
	

	/*=====================================*/
	//! \brief デストラクタ
	/*=====================================*/
	~CXFile( void );


	/*=============================================================*/
	//! \brief XFileの読み込みを行う
	//! \param[in]		lpD3DDevice		DirectXのデバイス
	//! \param[in]		_FilePass		ファイルパス
	//! \return 成功 = true
	//! \return 失敗 = false
	/*=============================================================*/
	bool Load( LPDIRECT3DDEVICE9 lpD3DDevice , std::string _FilePass );	
	
	void Restore( void ){}

	/*=================================*/
	//! \brief XFileの描画
	/*=================================*/
	void Draw( LPDIRECT3DDEVICE9 lpD3DDevice );	
	

	/*=================================*/
	//! \brief XFileの解放
	/*=================================*/
	void Delete( void );



	/*===================================================================*/
	//! \note これ以降の関数に関しては使用時に最善の注意をする事！
	/*===================================================================*/


	/*===========================================*/
	//! \brief メッシュデータを返す
	/*===========================================*/
	inline LPD3DXMESH GetlpMesh( void ){ return xData.lpMesh; }

	/*=======================================================================================*/
	//! \brief メッシュデータをセットする
	//! \note 使用時に上書きされるので前データはリリースするのを忘れないようにする事
	/*=======================================================================================*/
	inline void SetlpMesh( LPD3DXMESH *_Mesh ){ xData.lpMesh = *_Mesh; }


	/*===========================================*/
	//! \brief マテリアルを返す
	/*===========================================*/
	inline D3DMATERIAL9* GetMaterial( void ){ return xData.Mat; }

	/*===========================================*/
	//! \brief マテリアルをセットする
	/*===========================================*/
	inline void SetMaterial( D3DMATERIAL9 *Mat ){ xData.Mat = Mat; }


	/*==============================================*/
	//! \brief テクスチャを返す
	/*==============================================*/
	inline CTexture** GetTexture( void ){ return xData.Tex; }

	XFILE xData;						//!< メッシュデータ

private:

	/*===============================*/
	//! \brief 初期化
	/*===============================*/
	void Clear( void );


	std::string m_FullFileName;			//!< ファイルまでの相対パス
	std::string m_FileName;				//!< ファイル名


};

