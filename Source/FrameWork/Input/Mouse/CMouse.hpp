#pragma once

class CMouse
{

	/*====================================================*/
	//!
	//! \file
	//! \class CMouse
	//! \brief <b>マウスからの入力を管理</b>
	//!
	//! \author Y.Yamamuro \n
	//! \date  2014/09/03
	//! \since 2014/09/05
	//!
	/*====================================================*/

public:

	/*=====================================*/
	//! \enum CMouse::MouseType
	//! \brief マウスのボタンの種類
	/*=====================================*/
	enum MouseTypes
	{
		B_LEFT,		//!< 左ボタン
		B_RIGHT,	//!< 右ボタン
		B_MAX		//!< 最大値
	};


	/*=====================================*/
	//! \enum MouseStateTypes
	//! \brief マウスのボタンの状態
	/*=====================================*/
	enum MouseStateTypes
	{
		MST_PUSH,	//!< 押した瞬間
		MST_HOLD,	//!< 押し続けている
		MST_PULL,	//!< 離した瞬間
		MST_FREE	//!< 押されていない
	};


	/*==============================================*/
	//! \brief インスタンスを返す
	/*==============================================*/
	static CMouse* GetInstance( void )
	{
		if( m_pInstance == nullptr )
		{
			m_pInstance = new CMouse();
		}
		return m_pInstance;
	}


	/*=====================================*/
	//! \brief デストラクタ
	/*=====================================*/
	~CMouse( void );


	/*============================================================*/
	//! \brief マウスの初期化
	//! \param[in]	_hWnd		ウィンドウハンドル
	/*============================================================*/
	void Initialize( const HWND _hWnd );


	/*=========================================*/
	//! \brief マウスの状態を更新する
	/*=========================================*/
	void AllStateUpdata( void );


	/*==================================================================*/
	//! \brief 指定したマウスのボタンの状態を返す
	//! \param[in]	_Id		調べたいボタンのIDを指定(MouseTypes)
	//!	\return		ボタンの状態を返す(MouseStateTypes)
	/*==================================================================*/
	inline int GetState( const int _Id ){ return m_State[_Id]; }


	/*=============================================*/
	//! \brief ウィンドウ上の座標を返す
	/*=============================================*/
	inline POINT GetPos( void )
	{ 
		POINT Pt;
		GetCursorPos( &Pt );
		ScreenToClient( hWnd , &Pt );
		return Pt;
	}


	/*==============================================*/
	//! \brief マウスホイールの移動量を返す
	/*==============================================*/
	inline int GetWheelMovement( void ){ return m_WheelMovement; }


	/*================================================================*/
	//! \brief マウスカーソルの表示、非表示を切り替える
	//! \brief 複数回使用しないようにする
	//! \param[in]	_Flag	カーソルを表示するかどうかのフラグ
	/*================================================================*/
	inline void SetCursor( const BOOL _Flag ){ ShowCursor( _Flag ); }


	/*=========================================================*/
	//! \brief マウスを指定座標にセットする
	//! \param[in]	_Pos	セットするマウスの座標
	/*=========================================================*/
	inline void SetPos( const LPPOINT _Pos )
	{
		ClientToScreen( hWnd , _Pos );
		SetCursorPos( _Pos->x , _Pos->y );
	}


	/*================================================================================*/
	//! \brief ウィンドウプロシージャからマウスホイールの移動量を取得する
	//! param[in]	_Movement	マウスホールの移動量
	/*================================================================================*/
	inline void SetWheelMovement( int _Movement ){ m_WheelMovement = _Movement; }


private:

	/*===============================================*/
	//! \brief デフォルトコンストラクタ
	/*===============================================*/
	CMouse( void );

	/*===============================================*/
	//! \brief コピーコンストラクタ(使用禁止)
	/*===============================================*/
    CMouse( const CMouse& single );

	/*===============================================*/
    //! \brief 代入演算子(使用禁止)
	/*===============================================*/
	const CMouse& operator = ( const CMouse& single );


	/*=================================================================================*/
	//! \brief 1つのマウスの状態を更新する
	//! \param[in,out]  _bPushFlag	クリックしているかどうかのフラグ
	//! \param[in]		_pButtonId	更新するマウスのボタンのIDを指定(MouseTypes)
	/*=================================================================================*/
	void StateUpdata( const bool _bPushFlag , const int _pButtonId );


	//! \brief インスタンスのポインタ
	static CMouse *m_pInstance;		//!< CMouseのポインタ

	int m_State[B_MAX];				//!< マウスの状態を格納
	int m_WheelMovement;			//!< マウスホイールの移動量を格納

	HWND hWnd;						//!< 座標を取得する為のウィンドウハンドル

};

/*============================================*/
//! \def MOUSE
//! \brief コール時に使用するマクロ 
/*============================================*/
#define MOUSE CMouse::GetInstance()

/*=====================================================*/
//! \def MOUSE_STATE
//! \brief マウスのボタンを押しているのか返す
/*=====================================================*/
#define MOUSE_STATE( _Key ) ( GetAsyncKeyState( _Key ) && 0x800  ) 
